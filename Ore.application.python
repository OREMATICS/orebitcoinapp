{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Python program to check proth number\n",
    "#Utility to check power of two\n",
    "def isPowerOfTwo(n):  \n",
    "    return (n and (not(n & (n-1))))\n",
    "\n",
    "#check if proth number or not\n",
    "def isProthNumber(n): \n",
    "    k = 1 \n",
    "    while(k < (n // k)):\n",
    "        #check if k is divisible or not\n",
    "        if(n % k == 0):\n",
    "            \n",
    "            #check if n/k is power of 2 or not\n",
    "            if(isPowerOfTwo(n // k)):\n",
    "                return True\n",
    "        #update k to next odd number\n",
    "        k = k + 2 \n",
    "    #if we reach here means there is no value of k such that k is odd and n/k is a power of 2 greater than k\n",
    "    return False\n",
    "\n",
    "#Driver code\n",
    "#Get n and a\n",
    "n = int(input('Kindly enter a number to check for:  '))\n",
    "a = int(input('Kindly input value for a: '))\n",
    "    \n",
    "if(isProthNumber(n-1)):\n",
    "    \n",
    "    m = (a ** ((isProthNumber(n-1) - 1) / 2) + 1) / isProthNumber(n-1)\n",
    "    \n",
    "    if m.is_integer():\n",
    "        print('Yay!, this is a proth and prime number')\n",
    "    else:\n",
    "        print(f'{n} is a proth but not a prime number!')\n",
    "    \n",
    "else:\n",
    "    print('Sorry!, not a Proth number. Try another number')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
